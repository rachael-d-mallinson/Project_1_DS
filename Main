import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class Main {
	/**
	 * Finds the Term with the largest exponent in the passed in ArrayList of Terms
	 * @param poly: the ArrayList of Terms
	 * @return: Term with the largest exponent
	 */
	private static Term findMaxTerm(ArrayList<Term> poly) {
		Iterator<Term> iterator = poly.iterator();
		int maxExp = Integer.MIN_VALUE;
		Term maxTerm = null;

		// While there are more terms in the list
		while (iterator.hasNext()) {
			Term tempTerm = iterator.next(); // A temporary term is used to compare exponents
			int temp = tempTerm.getExponent();
			if (temp > maxExp) { // If the temporary term is larger, update the maximum term to match
				maxExp = temp;
				maxTerm = tempTerm;
			}
		}
		return maxTerm; // Return the term with the largest exponent
	}
	
	/**
	 * Splits polynomials into Term objects comprised of coefficients and exponents
	 * @param input: A polynomial entered as a String
	 * @return: An ArrayList of Term objects
	 */
	public static ArrayList<Term> splitPolynomial(String input) {
		ArrayList<Term> terms = new ArrayList<>(); // Create a new ArrayList to hold terms
		input = input.replace("-", "+-"); // Replace all negatives with +-
		
		// Convert all variables to lower case and update the string so all variables are the same
		input = input.replace("x", "X"); 
		
		// Create a new ArrayList of Strings split at the plus sign
		List<String> poly = new ArrayList<String>(Arrays.asList(input.split("\\+"))); 

		// If any list items are empty, remove them
		for (int i = 0; i < poly.size(); i++) {
			if (poly.get(i).isEmpty()) {
				poly.remove(i);
			}
		}

		// Create variables to later be added to a Term object
		int constant = 0;
		int coefficient = 0;
		int exponent = 0;
		for (int i = 0; i < poly.size(); i++) {
			// If the list item has an exponent
			if (poly.get(i).contains("^")) {
				// If the last item in the string is the exponent notation
				if (poly.get(i).charAt(poly.get(i).length() - 1) == '^') {
					if (poly.get(i).charAt(0) == 'X') {
						coefficient = 1;
					} else if (poly.get(i).charAt(0) == '-' && poly.get(i).charAt(1) == 'X') {
						coefficient = -1;
					} else {
						coefficient = Integer.parseInt(poly.get(i).substring(0, poly.get(i).length() - 2));
					}
					// The exponent is the next item in the list
					exponent = Integer.parseInt(poly.get(i + 1));
					i++; // Advance i manually
				} else { // If the exponent notation is in the middle of the string
					// Split the string at the exponent notation
					String arr2[] = poly.get(i).split("\\^");
					if (arr2[0].charAt(0) == 'X') {
						coefficient = 1;
					} else if (arr2[0].charAt(0) == '-' && poly.get(i).charAt(1) == 'X') {
						coefficient = -1;
					} else {
						coefficient = Integer.parseInt(arr2[0].substring(0, arr2[0].length() - 1));
					}
					exponent = Integer.parseInt(arr2[1]);
				}
				// Create a new Term and add it to the ArrayList
				Term term = new Term(coefficient, exponent);
				terms.add(term);
				// If the list item contains X but no exponent notation
			} else if (poly.get(i).contains("X") && !poly.get(i).contains("^")) {
				if (poly.get(i).charAt(0) == 'X') {
					coefficient = 1;
				} else if (poly.get(i).charAt(0) == '-' && poly.get(i).charAt(1) == 'X') {
					coefficient = -1;
				} else {
					coefficient = Integer.parseInt(poly.get(i).substring(0, poly.get(i).length() - 1));
				}
				// Create a new Term and add it to the ArrayList
				Term term = new Term(coefficient, 1);
				terms.add(term);
				// If the list item does not contain X it is a constant
			} else if (!poly.get(i).contains("X")) {
				constant = Integer.parseInt(poly.get(i));
				// Add the Term to the ArrayList
				Term term = new Term(constant, 0);
				terms.add(term);
			}
		}

		return terms;
	}
	
	/**
	 * Sorted the ArrayList of polynomial terms by largest to smallest
	 * @param poly: the ArrayList of Terms
	 * @return sortedList: A sorted ArrayList of passed in terms by largest exponent to smallest
	 */
	public static ArrayList<Term> sort(ArrayList<Term> poly) {
		ArrayList<Term> sortedList = new ArrayList<>();
		Iterator<Term> iterator = poly.iterator();

		// Make sure the input list is not empty
		if (poly != null) {
			while (iterator.hasNext()) {
				
				// Find the term with the largest exponent
				Term maxTerm = findMaxTerm(poly);
				sortedList.add(maxTerm); // Add that term to the sorted list
				poly.remove(maxTerm); // Remove the maxTerm from the input list
			}
		}
		return sortedList;
	}
	
	/**
	 * Reduces (adds) like terms inside the ArrayList of terms
	 * @param poly: the sorted ArrayList containing all the Terms of both polynomials
	 * @return: The sum of both polynomials with all like Terms added together
	 */
	public static ArrayList<Term> sumPolynomial(ArrayList<Term> poly) {
		// Create a new ArrayList to hold the reduced terms
		ArrayList<Term> reducedList = new ArrayList<>();
		// Create two iterators to iterate through the list
		Iterator<Term> outer = poly.iterator();
		Iterator<Term> inner = poly.iterator();
		// Advance the second iterator manually ahead of the loop
		inner.next();
		// Outer loop 
		while (outer.hasNext()) {
			// Term to hold value of reduced terms
			Term reduced = null;
			// Pointer variable for outer loop
			Term a = outer.next();
			// Inner loop
			while (inner.hasNext()) {
				// Pointer variable for inner loop
				Term b = inner.next();
				// If there is a match reduce the terms
				if (a.compareTo(b) == 0) {
					reduced = a.reduceLikeTerms(b);
					// Set b's coefficient to new added value for easy comparison
					b.setCoefficient(reduced.getCoefficient());
					// Advance the outer iterator
					a = outer.next();
				} else {
					// If there is no match exit the loop
					break;
				}
			}
			// If a term is 0 don't add it to the list
			if (a.getCoefficient() == 0) { continue; }
			// Otherwise, add the newly reduced term to the new list
			else { reducedList.add(a); }
		}
		// Return the reduced list
		return reducedList;
	}
	
	/**
	 * Outputs a polynomial in a user-friendly way
	 * @param terms: An ArrayList of Terms
	 * @return: A polynomial as a String
	 */
	public static String outputPolynomial(ArrayList<Term> terms) {
		// Create a new iterator and string builder
		Iterator<Term> iterator = terms.iterator();
		StringBuilder poly = new StringBuilder();
		// While the ArrayList has items
		while (iterator.hasNext()) {
			// Create a pointer to check each term
			Term term = iterator.next();
			// If the exponent is 0 the term is a constant - only output coefficient
			if (term.getExponent() == 0) {
				if (term.getCoefficient() < 0) { // Check if negative
					if (poly.length() == 0) { poly.append(String.format("%d ", term.getCoefficient())); }
					else { poly.append(String.format("- %d ", Math.abs(term.getCoefficient()))); }
				} else { // Otherwise positive
					if (poly.length() == 0) { poly.append(String.format("%d ", term.getCoefficient())); }
					else { poly.append(String.format("+ %d ", term.getCoefficient())); }
				}
			// If both coefficient and exponent are 1, only output X
			} else if (term.getCoefficient() == 1 && term.getExponent() == 1) {
				if (poly.length() == 0) { poly.append("X "); }
				else { poly.append("+ X "); }
			// Check if negative and add minus sign
			} else if (term.getCoefficient() == -1 && term.getExponent() == 1) {
				if (poly.length() == 0) { poly.append("-X "); }
				else { poly.append("- X "); }
			// If the exponent is 1 and the coefficient is not, output only the coefficient and X
			} else if ((term.getCoefficient() != 1 || term.getCoefficient() != -1) && term.getExponent() == 1) {
				if (term.getCoefficient() < 0) { // Check if negative
					if (poly.length() == 0) { poly.append(String.format("%dX ", term.getCoefficient())); }
					else { poly.append(String.format("- %dX ", Math.abs(term.getCoefficient())));}
				} else { // Otherwise positive
					if (poly.length() == 0) { poly.append(String.format("%dX ", term.getCoefficient())); }
					else { poly.append(String.format("+ %dX ", term.getCoefficient()));}
				}
			// If coefficient is 1 and exponent is not only output X and the exponent
			} else if (term.getCoefficient() == 1 && term.getExponent() != 1) {
				if (poly.length() == 0) { poly.append(String.format("X^%d ", term.getExponent())); }
				else { poly.append(String.format("+ X^%d ", term.getExponent())); }
			// Check if negative
			} else if (term.getCoefficient() == -1 && term.getExponent() != 1) {
				if (poly.length() == 0) { poly.append(String.format("-X^%d ", term.getExponent())); }
				else { poly.append(String.format("- X^%d ", term.getExponent())); }
			// Otherwise, both coefficient and exponent are not 1, output both
			} else {
				if (term.getCoefficient() < 0) { // Check if negative
					if (poly.length() == 0) { poly.append(String.format("-%dX^%d ", Math.abs(term.getCoefficient()), term.getExponent())); }
					else { poly.append(String.format("- %dX^%d ", Math.abs(term.getCoefficient()), term.getExponent())); }
				} else { // Otherwise positive
					if (poly.length() == 0) { poly.append(String.format("%dX^%d ", Math.abs(term.getCoefficient()), term.getExponent())); }
					else { poly.append(String.format("+ %dX^%d ", term.getCoefficient(), term.getExponent())); }
				}
			}		
		}
		// Return string
		return poly.toString();	
	}


	public static void main (String[] args) {
		Scanner scnr = new Scanner(System.in);
		
		//Make a user-friendly menu
		String UserMenuPrompt = "Polynomial Calculator\nPlease Choose your Menu Option by choosing a Number to enter.";
		String UserMenuOptions = "1. Enter Two Polynomials to get the product \n2. Quit\nEnter here:";
		boolean systemRunning = true;
		
		while (systemRunning) {
			System.out.println(UserMenuPrompt);		//title, and menu instructions
			System.out.print(UserMenuOptions);		//menu options
			int userChoice = scnr.nextInt();		//read in their choice
			String firstPoly = "";				//the first polynomial given
			String secondPoly = "";				//the second polynomial given
			ArrayList<Term> combined = new ArrayList<>(); 	// ArrayList to store both polynomials
		
			if (userChoice == 1) {
				System.out.println("\nPlease enter two polynomials with no spaces and all variables are \"x\".");
				System.out.print("First Polynomial: ");
				firstPoly = scnr.next();
				System.out.print("Second Polynomial: ");
				secondPoly = scnr.next();
				
				// Parse first and second polynomials into terms and add them to an ArrayList
				combined.addAll(splitPolynomial(firstPoly));
				combined.addAll(splitPolynomial(secondPoly));
				// Sort the list from greatest to smallest exponent
				combined = sort(combined);
				// Reduce like terms
				combined = sumPolynomial(combined);
				// Output the result
				System.out.println("\nThe sum of the two polynomials is: ");
				System.out.println(outputPolynomial(combined));
				System.out.println();
				
				// Give user the choice to add more polynomials
				System.out.println("Try again? \n1. Yes\n2. No");
				userChoice = scnr.nextInt();
				
				//secondary menu
				//user wishes to add two more polynomials
				if (userChoice == 1) { systemRunning = true; }
				//user wishes to quit
				else if (userChoice == 2) {
					System.out.println("Thank you for using the Polynomial Calculator. Have a great day!");
					systemRunning = false; }
				//user entered something other then the menu options
				 else {
					System.out.println("Please pick one of the Menu Options. You will be redirected.\n ");
					}
		}		
			//user wishes to quit
			else if (userChoice == 2) {
				System.out.println("Thank you for using the Polynomial Calculator. Have a great day!");
				systemRunning = false; }
			//user entered something other then the menu options
			else {
				System.out.println("Please pick one of the Menu Options. You will be redirected.\n ");
			}
		}
	
		// Close the scanner!
		scnr.close();	
	}
}
